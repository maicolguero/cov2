# -*- coding: utf-8 -*-
"""proyectofinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F0llnOzVS3flTLOiH3eoMhFjL38znIoj
"""

!pip install -U -q kaggle
!mkdir -p ~/.kaggle

from google.colab import files
files.upload()

!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d plameneduardo/sarscov2-ctscan-dataset
!l

import zipfile
import io
data = zipfile.ZipFile('covid.zip')
data.extractall()
# extraer archivos zip

import cv2
import numpy as np
import os
import matplotlib.pyplot as plt

covid_folder ="/content/COVID"
covid=[]
nocovid_folder ="/content/non-COVID"
nocovid=[]

img_size=250
for img in os.listdir(covid_folder):
    img = cv2.imread(os.path.join(covid_folder,img))
    img_resize= cv2.resize(img,(img_size,img_size))
    covid.append(img_resize)
covid = np.array(covid)
print(covid.shape)

img_size=250
for img in os.listdir(nocovid_folder):
    img = cv2.imread(os.path.join(nocovid_folder,img))
    img_resize= cv2.resize(img,(img_size,img_size))
    nocovid.append(img_resize)
nocovid = np.array(nocovid)
print(nocovid.shape)

print(nocovid[4].shape)
plt.figure()
plt.imshow(np.squeeze(nocovid[4]))
plt.colorbar()
plt.grid(False)
plt.show()

images =np.concatenate([covid,nocovid])
print(len(images))
Images = np.array(images)
print(Images.shape)

etiquetas_covid = np.repeat(0,1252)
print(len(etiquetas_covid))

etiquetas_nocovid = np.repeat(1,1229)
print(len(etiquetas_nocovid))

class_names = ['covid','nocovid']

labels = np.concatenate([etiquetas_covid,etiquetas_nocovid])
print(len(labels))
print(labels)
labels = np.array(labels)
print(labels.shape)

"""## test and train"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)

plt.figure(figsize=(10,10))
for i in range(20):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(X_train[i])
    #, cmap=plt.cm.binary
    plt.xlabel(y_train[i])
plt.show()

"""## creando red  neuronal"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import datasets,layers,models

model = keras.models.Sequential([
    keras.layers.Conv2D(filters=96, kernel_size=(11,11), strides=(4,4), activation='relu', input_shape=(250,250,3)),
    keras.layers.BatchNormalization(),
    keras.layers.MaxPool2D(pool_size=(3,3), strides=(2,2)),
    keras.layers.Conv2D(filters=256, kernel_size=(5,5), strides=(1,1), activation='relu', padding="same"),
    keras.layers.BatchNormalization(),
    keras.layers.MaxPool2D(pool_size=(3,3), strides=(2,2)),
    keras.layers.Conv2D(filters=384, kernel_size=(3,3), strides=(1,1), activation='relu', padding="same"),
    keras.layers.BatchNormalization(),
    keras.layers.Conv2D(filters=384, kernel_size=(1,1), strides=(1,1), activation='relu', padding="same"),
    keras.layers.BatchNormalization(),
    keras.layers.Conv2D(filters=256, kernel_size=(1,1), strides=(1,1), activation='relu', padding="same"),
    keras.layers.BatchNormalization(),
    keras.layers.MaxPool2D(pool_size=(3,3), strides=(2,2)),
    keras.layers.Flatten(),
    keras.layers.Dense(4096, activation='relu'),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(4096, activation='relu'),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(2, activation='softmax')
])

model.summary()

model.compile(loss='sparse_categorical_crossentropy', optimizer=tf.optimizers.SGD(lr=0.001), metrics=['accuracy'])

history=model.fit(X_train,y_train,epochs=30)

img = cv2.imread("Covid (350).png")
img_cvt=cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.imshow(img_cvt)
plt.show()

img2=img_cvt
img2=cv2.resize(img2,(img_size,img_size))
print(img2.shape)
img2=(np.expand_dims(img2,0))
print(img2.shape)

predictions_single = model.predict(img2)
print(predictions_single)
print(np.sum(predictions_single))
print(np.argmax(predictions_single))
print(class_names[np.argmax(predictions_single)])

plt.plot(history.history['accuracy'],label='accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

test_scores = model.evaluate(X_test,y_test,verbose=1)

model.save('covid.h5')